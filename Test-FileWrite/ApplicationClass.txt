package com.etp.hubana.<<packageName>>;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.annotation.PostConstruct;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.cloud.netflix.ribbon.RibbonClient;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.etp.hubana.<<packageName>>.constants.CommonConstants;
import com.etp.hubana.<<packageName>>.constants.MessageConstants;
import com.etp.hubana.<<packageName>>.helper.Configuration;
import com.etp.hubana.<<packageName>>.helper.Errors;
import com.etp.hubana.<<packageName>>.helper.RandomNumberGenerator;

@EnableDiscoveryClient
@SpringBootApplication
@FeignClient(name = "<<serviceName>>-service")
@RibbonClient(name = "<<serviceName>>-service")
public class <<classFileName>> {
	private static final Logger LOG = LogManager.getFormatterLogger();

	@Bean
	@LoadBalanced
	public RestTemplate restTemplate() {
		/* returning object of RestTemplate */
		return new RestTemplate();
	}

	public static void main(String[] args) {

		/* APPLICATION START-UP */
		String logID = RandomNumberGenerator.generateRandomNumberForLOG();
		long startTime = System.currentTimeMillis();

		/* declaring objects */
		SpringApplication application = null;
		ApplicationContext appCnt = null;
		try {
			/* ============= BUSINESS LOGIC ================= */
			System.setProperty("spring.devtools.restart.enabled", "false");

			/* defining application class */
			application = new SpringApplication(<<classFileName>>.class);

			/*-----RUN APPLICATION-------------*/
			appCnt = SpringApplication.run(<<classFileName>>.class, args);

			/* setting properties into application */
			Map<String, Object> appProperties = setApplicationConstant(appCnt);
			Configuration.setPropertyValue(appProperties);
			application.setDefaultProperties(appProperties);

			LOG.info(CommonConstants.strGalaxy);
			LOG.info(logID + MessageConstants.REDIS_CONFIGURATION_START_MSG);
		} catch (Exception e) {
			LOG.error(logID + MessageConstants.LOGGER_ERROR_MESSAGE);
			Errors.logException(e, logID);
			LOG.info(logID + MessageConstants.LOGGER_APP_BAR);
		}
		/* timer variable */
		long endTime = System.currentTimeMillis();
		LOG.info(logID + MessageConstants.EXEC_TIME + (endTime - startTime));
		LOG.info(logID + MessageConstants.LOGGER_APP_BAR);
	}

	/**
	 * This method is used to set application constant.
	 * 
	 * @param ApplicationContext appCnt
	 * @return Map appProperties
	 */
	public static Map<String, Object> setApplicationConstant(ApplicationContext appCnt) {
		Map<String, Object> appProperties = new HashMap<String, Object>();
		ServiceProperties envProp = appCnt.getBean(ServiceProperties.class);
		Map<String, Object> appNewProp = envProp.configPropMap();

		String p_AttributeKey = CommonConstants.BLANK;
		String p_AttributeValue = CommonConstants.BLANK;
		Set<String> keyTerms = appNewProp.keySet();
		Iterator<String> it = keyTerms.iterator();

		/* iterating through enum */
		while (it.hasNext()) {
			/* get Key */
			p_AttributeKey = (String) it.next();
			/* get Value */
			p_AttributeValue = String.valueOf(appNewProp.get(p_AttributeKey));
			/* adding properties in main map */
			appProperties.put(p_AttributeKey, p_AttributeValue);

			if (p_AttributeKey.equals(CommonConstants.CACHE_SERVER_PORT)) {
				CommonConstants.CACHE_SERVER_PORT_NO = Integer.parseInt(p_AttributeValue);
			}
			if (p_AttributeKey.equals(CommonConstants.CACHE_SERVER_IP)) {
				CommonConstants.CACHE_SERVER_IP = p_AttributeValue;
			}
			if (p_AttributeKey.equals(CommonConstants.REDIS_CACHE_URL)) {
				CommonConstants.REDIS_CACHE_URL = p_AttributeValue;
			}
			if (p_AttributeKey.equals(CommonConstants.MYSQL_CONFIG_PROPS_REDIS_ENDPOINT)) {
				CommonConstants.MYSQL_CONFIG_PROPS_REDIS_ENDPOINT = p_AttributeValue;
			}
			if (p_AttributeKey.equals(CommonConstants.APP_ENV)) {
				CommonConstants.APP_ENV = p_AttributeValue;
			}
		}
		keyTerms = null;
		return appProperties;
	}

	/**
	 * This Class is used to Check and Read values from Spring Cloud Server and create a Map of the Properties that 
	 * are set in the Spring Application.
	 * 
	 * Note:
	 * Please add new fields as required in the class and also return them on the configMap 
	 * defined in the map annotated by '@postconstruct'. 
	 * 
	 */
	@Component
	class ServiceProperties {

		@Value("${spring.application.name}")
		private String springApplicationName;

		@Value("${host.name}")
		private String hostName;

		@Value("${CACHE.SERVER.IP}")
		private String cacheServerIP;

		@Value("${REDIS.CACHE.URL}")
		private String redisCacheURL;

		@Value("${REDIS.MYSQL.CONFIG.PROPS.REDIS.ENDPOINT}")
		private String redisMySqlConfigPropsEndPoint;

		@Value("${REDIS.ENDPOINT1}")
		private String redisEndPoint_1;

		@Value("${REDIS.ENDPOINT2}")
		private String redisEndPoint_2;

		@Value("${REDIS.ENDPOINT3}")
		private String redisEndPoint_3;

		@Value("${REDIS.ENDPOINT4}")
		private String redisEndPoint_4;

		@Value("${REDIS.ENDPOINT5}")
		private String redisEndPoint_5;

		@Value("${APP.ENV}")
		private String appEnv;

		@Value("${CACHE.SERVER.PORT.NO}")
		private int cacheServerPort;

		@Value("${logging.config}")
		private String logConfig;

		@Value("${eureka.client.registerWithEureka}")
		private boolean eurekaClientRegisterwithEureka;

		@Value("${eureka.client.fetchRegistry}")
		private boolean eurekaClientFetchRegistry;

		@Value("${server.ip}")
		private String serverIP;

		@Value("${eureka.client.service-url.default-zone}")
		private String eurekaServiceURL;

		@Value("${-XX}")
		private String EnvProps;

		@Value("${server.tomcat.max-threads}")
		private String tomcatMaxThreads;

		@Value("${FLUENTD.SERVER.PORT}")
		private String fluentdServerPort;

		@Value("${FLUENTD.TAG.PREFIX}")
		private String fluentdTagPrefix;

		@Value("${FLUENTD.SERVER.HOST}")
		private String fluentdServerHost;

		@Value("${MENU}")
		private String menu;
		
		@Value("<<serviceName>>.server.port")
		private String <<serviceName>>_port;
		
		@PostConstruct
		public Map<String, Object> configPropMap() {
			Map<String, Object> configMap = new HashMap<String, Object>();

			configMap.put("spring.application.name", springApplicationName);
			configMap.put("host.name", hostName);
			configMap.put("CACHE.SERVER.IP", cacheServerIP);
			configMap.put("REDIS.CACHE.URL", redisCacheURL);
			configMap.put("REDIS.MYSQL.CONFIG.PROPS.REDIS.ENDPOINT", redisMySqlConfigPropsEndPoint);
			configMap.put("REDIS.ENDPOINT1", redisEndPoint_1);
			configMap.put("REDIS.ENDPOINT2", redisEndPoint_2);
			configMap.put("REDIS.ENDPOINT3", redisEndPoint_3);
			configMap.put("REDIS.ENDPOINT4", redisEndPoint_4);
			configMap.put("REDIS.ENDPOINT5", redisEndPoint_5);
			configMap.put("APP.ENV", appEnv);
			configMap.put("CACHE.SERVER.PORT.NO", cacheServerPort);
			configMap.put("logging.config", logConfig);
			configMap.put("eureka.client.registerWithEureka", eurekaClientRegisterwithEureka);
			configMap.put("eureka.client.fetchRegistry", eurekaClientFetchRegistry);
			configMap.put("server.ip", serverIP);
			configMap.put("eureka.client.service-url.default-zone", eurekaServiceURL);
			configMap.put("-XX", EnvProps);
			configMap.put("server.tomcat.max-threads", tomcatMaxThreads);	
			configMap.put("FLUENTD.SERVER.PORT", fluentdServerPort);
			configMap.put("FLUENTD.TAG.PREFIX", fluentdTagPrefix);
			configMap.put("FLUENTD.SERVER.HOST", fluentdServerHost);
			configMap.put("MENU", menu);
            configMap.put("<<serviceName>>.server.port", <<serviceName>>_port);
			return configMap;
		}
	}
}